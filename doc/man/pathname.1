.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "PATHNAME" "" "March 2011" "Martin Aumont (mynyml)" "Pathname"
OOP wrapper for \fBfs\fR, \fBpath\fR and \fBStat\fR functions\. This document describes the api\. See README\.md for overview and usage\.
.
.SH "CORE NODE FUNCTIONS"
Pathnames are immutable
.
.SH "PATHNAME\-SPECIFIC METHODS"
Pathname also provides a few extra methods, which can be quite useful\.
.
.SS "toString()"
String representation of \fBpath\fR object
.
.IP "" 4
.
.nf

new Pathname(\'/tmp/foo\')\.toString()
#=> \'/tmp/foo\'
.
.fi
.
.IP "" 0
.
.SS "parent()"
Parent directory of \fBpath\fR
.
.IP "" 4
.
.nf

new Pathname(\'/tmp/foo\')\.parent()
#=> Pathname(\'/tmp\') #i\.e\. Pathname object for path \'/tmp\'
.
.fi
.
.IP "" 0
.
.SS "children()"
All paths (files and directories) one level below \fBpath\fR in the fs tree\. \fBpath\fR must be a directory\.
.
.IP "" 4
.
.nf

# given: \'/tmp/foo\', \'/tmp/bar\'

new Pathname(\'/tmp\')\.children()
#=> [Pathname(\'/tmp/foo\'), Pathname(\'/tmp/bar\')]
.
.fi
.
.IP "" 0
.
.SS "siblings()"
All paths (files and directories) in the same directory level as \fBpath\fR, excluding \fBpath\fR
.
.IP "" 4
.
.nf

# given: \'/tmp/foo\', \'/tmp/bar\', \'/tmp/baz\'

new Pathname(\'/tmp/foo\')\.siblings()
#=> [Pathname(\'/tmp/bar\'), Pathname(\'/tmp/baz\')]
.
.fi
.
.IP "" 0
.
.SS "tree()"
Entire fs tree below (and including) \fBpath\fR
.
.IP "" 4
.
.nf

# given: \'/tmp/foo\', \'/tmp/bar\', \'/tmp/bar/baz\'

new Pathname(\'/tmp\')\.tree()
#=> [Pathname(\'/tmp\'), Pathname(\'/tmp/foo\'), Pathname(\'/tmp/bar\'), Pathname(\'/tmp/bar/baz\')]
.
.fi
.
.IP "" 0
.
.SS "touch()"
Create a file at \fBpath\fR
.
.IP "" 4
.
.nf

path = new Pathname(\'/tmp/foo\')

path\.exists()
# false

path\.touch()

path\.exists() and path\.isFile()
# true
.
.fi
.
.IP "" 0
.
.SS "rmR()"
Recursively remove directory at \fBpath\fR and it\'s contents (whole directory tree below it)\.
.
.IP "" 4
.
.nf

path = new Pathname(\'/tmp\')

path\.tree()
#=> [Pathname(\'/tmp\'), Pathname(\'/tmp/foo\'), Pathname(\'/tmp/bar\'), Pathname(\'/tmp/bar/baz\')]

path\.rmR()

path\.tree()
#=> [Pathname(\'/tmp\')]

path\.exists()
# false

# NOTE: Pathname objects need not correspond to an existing file on the fs,
# so it\'s correct that path\.tree() above includes the current object\.
.
.fi
.
.IP "" 0
.
.SS "mkdirP()"
Create a multilevel path
.
.IP "" 4
.
.nf

path = new Pathname(\'/tmp/foo/bar\')

path\.exists()
# false

path\.parent()\.exists()
# false

path\.mkdirP()

path\.exists() and path\.isDirectory()
# true
.
.fi
.
.IP "" 0
.
.SS "traverse()"
Iterates over every component of \fBpath\fR
.
.IP "" 4
.
.nf

path  = new Pathname(\'/tmp/foo/bar\')
parts = []

path\.traverse(function(part) { parts\.push(part) })
parts #=> [Pathname(\'/tmp\'), Pathname(\'/tmp/foo\'), Pathname(\'/tmp/foo/bar\')]
.
.fi
.
.IP "" 0
.
.SS "components()"
Component parts of \fBpath\fR
.
.IP "" 4
.
.nf

new Pathname(\'/tmp/foo/bar\')\.components()
#=> [\'/\', \'tmp\', \'foo\', \'bar\']
.
.fi
.
.IP "" 0

